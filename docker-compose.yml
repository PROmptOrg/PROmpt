version: '3.9'

x-kong-config:
  &kong-env
  KONG_DATABASE: ${KONG_DATABASE:-postgres}
  KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  KONG_PG_HOST: db
  KONG_PG_USER: ${KONG_PG_USER:-kong}
  KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password

volumes:
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  prompt-data:
  redis-data:

networks:
  kong-net:
    driver: bridge
  prompt-net:
    driver: bridge

services:
# kong 
  kong-migrations:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations bootstrap
    profiles: [ "database" ]
    depends_on:
      - db
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    restart: on-failure

  kong-migrations-up:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations up && kong migrations finish
    profiles: [ "database" ]
    depends_on:
      - db
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    restart: on-failure

  kong:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    container_name: kong
    user: "${KONG_USER:-kong}"
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000}"
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
      KONG_ADMIN_GUI_LISTEN: "${KONG_ADMIN_GUI_LISTEN:-0.0.0.0:8002}"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
      KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
      - prompt-net
    ports:
      # The following two environment variables default to an insecure value (0.0.0.0)
      # according to the CIS Security test.
      - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8000:8000/tcp"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"
      # Making them mandatory but undefined, like so would be backwards-breaking:
      # - "${KONG_INBOUND_PROXY_LISTEN?Missing inbound proxy host}:8000:8000/tcp"
      # - "${KONG_INBOUND_SSL_PROXY_LISTEN?Missing inbound proxy ssl host}:8443:8443/tcp"
      # Alternative is deactivating check 5.13 in the security bench, if we consider Kong's own config to be enough security here

      - "127.0.0.1:8001:8001/tcp"
      - "127.0.0.1:8444:8444/tcp"
      - "127.0.0.1:8002:8002/tcp"
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5
    read_only: true
    volumes:
      - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - kong_tmp_vol:/tmp
      - ./config:/opt/kong
    security_opt:
      - no-new-privileges

  db:
    image: postgres:9.5
    profiles: [ "database" ]
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-d",
          "${KONG_PG_DATABASE:-kong}",
          "-U",
          "${KONG_PG_USER:-kong}"
        ]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    networks:
      - kong-net
    volumes:
      - kong_data:/var/lib/postgresql/data
# centrifugo
  centrifugo:
    container_name: centrifugo
    image: centrifugo/centrifugo:v5
    volumes:
      - ./config/config.json:/centrifugo/config.json
    command: centrifugo -c config.json
    ports:
      - 4000:8000
    ulimits:
      nofile:
        soft: 65535
        hard: 65535
    networks:
      - kong-net
# kafka cluster
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    profiles: [ "kafka_cluster" ]
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - prompt-net
    ports:
      - 2181:2181

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    profiles: [ "kafka_cluster" ]
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 9997:9997
    hostname: kafka
    networks:
      - prompt-net
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://192.168.240.1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: kafka

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    profiles: [ "kafka_cluster" ]
    container_name: kafka-ui
    networks:
      - prompt-net
    ports:
      - 8082:8080
    restart: always
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      SPRING_CONFIG_ADDITIONAL-LOCATION: /kafka/config.yml
    volumes:
      - ./config/config.yml:/kafka/config.yml
    links:
      - kafka
      - zookeeper
# Redis 
  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    command: redis-server /etc/redis/redis.conf
    volumes:
      - redis-data:/var/lib/redis/data
      - ./config/redis.conf:/etc/redis/redis.conf
# PROmpt main DB
  main-db:
    container_name: main-db
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_PASSWORD_FILE: ./run/secrets/maindb_postgres_password
      POSTGRES_DATABASE: postgres
      POSTGRES_USER: postgres
    ports:
      - 5432:5432
    networks:
      - prompt-net
    volumes:
      - prompt-data:/var/lib/postgresql/data
      - ./config/init.sql:/docker-entrypoint-initdb.d/init.sql
    secrets:
      - maindb_postgres_password
    healthcheck:
      test: psql -U postgres -q -d postgres -c "SELECT 'ready';"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
# MessageProducer
  message-produser:
    container_name: message-producer
    image: vga815/messagesproducer:latest
    ports: 
      - 5000:8080
    networks:
      - prompt-net
      - kong-net
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
      - BootstrapServers=192.168.240.1:9092
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/home/app/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/home/app/.aspnet/https:ro
      
  text-messages-transmitter:
    container_name: text-messages-transmitter
    image: vga815/text-messages-transmitter:latest
    ports: 
      - 5001:8080
    networks:
      - prompt-net
    environment:
      - BROKER=192.168.240.1:9092
  
  signup-service:
    container_name: signup-service
    image: vga815/signup-service:latest
    ports:
      - 3000:3000
    networks:
      - prompt-net
      - kong-net
    environment:
      - DATABASE_URL=postgres://postgres:postgres@main-db:5432/postgres
      - JWT_SECRET=tutu
    depends_on:
      - main-db
      - kong
  chat-creator:
    container_name: chat-creator
    image: vga815/chat-creator:latest
    ports:
      - 3001:3000
    networks:
      - prompt-net
    environment:
        - DATABASE_URL=postgres://postgres:postgres@main-db:5432/postgres
    depends_on:
      - main-db
secrets:
  kong_postgres_password:
    file: ./config/KONGDB_PASSWORD
  maindb_postgres_password:
    file: ./config/MAINDB_PASSWORD
